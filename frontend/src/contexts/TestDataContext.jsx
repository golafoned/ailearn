import {
    createContext,
    useContext,
    useState,
    useCallback,
    useMemo,
} from "react";
import { apiFetch, ApiError } from "../utils/apiClient";

const TestDataContext = createContext(null);

export function TestDataProvider({ children }) {
    // Tests generated by the current user (no listing endpoint yet) -> placeholder empty array
    const [tests, setTests] = useState([]);
    const [testsPageInfo, setTestsPageInfo] = useState({
        page: 1,
        pageSize: 20,
        total: 0,
        totalPages: 0,
    });
    const [previewTest, setPreviewTest] = useState(null); // generated test after polling (metadata + questions)
    const [lastGeneratedCode, setLastGeneratedCode] = useState(null);
    const [currentTest, setCurrentTest] = useState(null); // test fetched by code for landing/attempt
    const [attempt, setAttempt] = useState(null); // current active attempt {attemptId, code, startedAt}
    const [attemptsForTest, setAttemptsForTest] = useState([]); // owner view list
    const [myAttempts, setMyAttempts] = useState([]); // authenticated user's attempts
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const clearError = () => setError(null);

    // Fetch test metadata + question shells by share code
    const fetchTestByCode = useCallback(async (code) => {
        if (!code) return null;
        setLoading(true);
        setError(null);
        try {
            const data = await apiFetch(`/api/v1/tests/code/${code}`);
            setCurrentTest(data);
            return data;
        } catch (e) {
            setError(e instanceof ApiError ? e.message : "Failed to load test");
            throw e;
        } finally {
            setLoading(false);
        }
    }, []);

    // Start attempt (public)
    const startAttempt = useCallback(
        async ({ code, participantName, displayName }) => {
            setLoading(true);
            setError(null);
            try {
                const resp = await apiFetch("/api/v1/tests/start", {
                    method: "POST",
                    body: { code, participantName, displayName },
                });
                setAttempt(resp);
                return resp;
            } catch (e) {
                setError(
                    e instanceof ApiError
                        ? e.message
                        : "Failed to start attempt"
                );
                throw e;
            } finally {
                setLoading(false);
            }
        },
        []
    );

    // Submit attempt answers
    const submitAttempt = useCallback(async ({ attemptId, answers }) => {
        setLoading(true);
        setError(null);
        try {
            const resp = await apiFetch("/api/v1/tests/submit", {
                method: "POST",
                body: { attemptId, answers },
            });
            // Merge into attempt state
            setAttempt((a) => (a ? { ...a, ...resp } : a));
            return resp;
        } catch (e) {
            setError(
                e instanceof ApiError ? e.message : "Failed to submit attempt"
            );
            throw e;
        } finally {
            setLoading(false);
        }
    }, []);

    // List attempts for a test (owner)
    const fetchAttemptsForTest = useCallback(async (testId) => {
        if (!testId) return [];
        setLoading(true);
        setError(null);
        try {
            const resp = await apiFetch(`/api/v1/tests/${testId}/attempts`);
            setAttemptsForTest(resp.attempts || []);
            return resp.attempts || [];
        } catch (e) {
            setError(
                e instanceof ApiError ? e.message : "Failed to load attempts"
            );
            throw e;
        } finally {
            setLoading(false);
        }
    }, []);

    // List my attempts (auth)
    const fetchMyAttempts = useCallback(async () => {
        setLoading(true);
        setError(null);
        try {
            const resp = await apiFetch("/api/v1/tests/me/attempts");
            setMyAttempts(resp.attempts || []);
            return resp.attempts || [];
        } catch (e) {
            setError(
                e instanceof ApiError ? e.message : "Failed to load my attempts"
            );
            throw e;
        } finally {
            setLoading(false);
        }
    }, []);

    const addLocalGeneratedTest = useCallback((t) => {
        setTests((prev) => [t, ...prev]);
    }, []);

    const fetchMyTests = useCallback(
        async ({ page = 1, pageSize = 20, append = false } = {}) => {
            setLoading(true);
            setError(null);
            try {
                const data = await apiFetch(
                    `/api/v1/tests/mine?page=${page}&pageSize=${pageSize}`
                );
                setTests((prev) =>
                    append ? [...prev, ...data.items] : data.items
                );
                setTestsPageInfo({
                    page: data.page,
                    pageSize: data.pageSize,
                    total: data.total,
                    totalPages: data.totalPages,
                });
                return data;
            } catch (e) {
                setError(
                    e instanceof ApiError ? e.message : "Failed to load tests"
                );
                throw e;
            } finally {
                setLoading(false);
            }
        },
        []
    );

    const getTestById = useCallback(
        (id) => tests.find((t) => t.id === id) || null,
        [tests]
    );

    const value = useMemo(
        () => ({
            // State
            tests,
            previewTest,
            lastGeneratedCode,
            currentTest,
            attempt,
            attemptsForTest,
            myAttempts,
            loading,
            error,
            // Setters / actions
            setPreviewTest,
            setLastGeneratedCode,
            addLocalGeneratedTest,
            fetchMyTests,
            testsPageInfo,
            fetchTestByCode,
            startAttempt,
            submitAttempt,
            fetchAttemptsForTest,
            fetchMyAttempts,
            clearError,
            setAttempt,
            setCurrentTest,
            getTestById,
        }),
        [
            tests,
            previewTest,
            lastGeneratedCode,
            currentTest,
            attempt,
            attemptsForTest,
            myAttempts,
            loading,
            error,
            fetchTestByCode,
            startAttempt,
            submitAttempt,
            fetchAttemptsForTest,
            fetchMyAttempts,
            addLocalGeneratedTest,
            fetchMyTests,
            testsPageInfo,
            getTestById,
        ]
    );

    return (
        <TestDataContext.Provider value={value}>
            {children}
        </TestDataContext.Provider>
    );
}

// eslint-disable-next-line react-refresh/only-export-components
export const useTestData = () => {
    const ctx = useContext(TestDataContext);
    if (!ctx)
        throw new Error("useTestData must be used within TestDataProvider");
    return ctx;
};
